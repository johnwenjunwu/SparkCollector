package collector;

import org.apache.spark.SparkConf;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import scala.Tuple2;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import java.util.Arrays;
import java.util.regex.Pattern;

public class Network {
    private static final Pattern SPACE = Pattern.compile(" ");

    public static void main(String[] args) throws Exception {
//        if (args.length < 2) {
//            System.err.println("Usage: JavaNetworkWordCount <hostname> <iteration>");
//            System.exit(1);
//        }
        Logger.getLogger("org").setLevel(Level.OFF);
        // Create the context with a 1 second batch size
        SparkConf sparkConf = new SparkConf()
                .setAppName("SparkCollector")
                .setMaster("local[4]")
                .set("spark.eventLog.enabled", "false");
        JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(5));


        // Create a JavaReceiverInputDStream on target ip:iteration and count the
        // words in input stream of \n delimited text (eg. generated by 'nc')
        // Note that no duplication in storage level only for running locally.
        // Replication necessary in distributed scenario for fault tolerance.
        JavaReceiverInputDStream<String> lines = ssc.receiverStream(
                new CollectReceiver("http://www.bbc.com", 115)
        );
//        JavaDStream<String> words = lines.flatMap(x -> Arrays.asList(SPACE.split(x)).iterator());
        JavaPairDStream<String, Integer> wordCounts = lines.mapToPair(s -> new Tuple2<>(s, 1))
                .reduceByKey((i1, i2) -> i1 + i2);

        wordCounts.print();
        ssc.start();
        ssc.awaitTermination();
    }
}